DATA SORTING VISUALIZER
------------------------

Current Notes:
demo_heap_sort :
	to visually show the heap pop and push process, the array size grows from 1, which is a problem. So! to fix this, i'm going to only print the old current array, but insert the newly added values from the line heap. that way, the line heap is being grown, and the old values are there to fill it to the size n.


TODO:
add text and highlighted versions of play, reset, and data buttons
tie events to buttons

calculate the average running time for each sort of the same size
(ie, run the sort on array of size 100, 5 times, and average these times before plotting)

convert global variables into parameters

VERIFY THAT EACH TIME TRIAL IS ACTUALLY SORTING THE SAME RANDOM ARRAY. THERE IS A POSSIBILITY ARRAY IS SORTED 1ST CALL AND THEN REPEATED ON SAME SORTED ARRAY FOR TEH 4 REMAINING TRIALS

Bugs:
last iteration of worst is considerably longer than the rest?

Infinite recursion during the case :
7
10
9
12
4
14
8
5
3
13
2
1
11
6
0
as the random array


NOTES:
When checking when to update display, only update graph areas.
Trying to update the whole canvas causes buttons and everything to flicker

MatPlotLib cannot be cleanly placed within a pygame window.
To work around this, just create rough draft on the window and then create a seperate window for matplotlib

Add parameters to draw_element_array
Sorting Demos will draw each step to the screen. 
Normal sorting methods will output to a file/matplotlib


            #if event.type == pygame.KEYDOWN and pause_UI == False:
            #    if pygame.key.get_pressed()[pygame.K_SPACE]:
            #        print("space")
            #        pause_UI = True
            #        sorting_switch(sorting_algo)
            #        pause_UI = False


        #draw_element_array_comparison(visualizer_dim[0],visualizer_dim[1],visualizer_dim[2],visualizer_dim[3],
        #index, checking_index)
        #draw_outline((visualizer_dim[0],visualizer_dim[1],visualizer_dim[2],visualizer_dim[3]))
        #print("A")
        #time.sleep(delay)
        #display.fill(white, (visualizer_dim[0]+1,visualizer_dim[1]+1,visualizer_dim[2]-2,visualizer_dim[3]-2))

previous worst case, which was better than my best case...
        #worst case for quick sort is when Mo3 pivot is second-largest/second-smallest and inversely sorted
        for value in range(array_size):
            worst_case_array.insert(0,value)
        temp = worst_case_array[0]
        worst_case_array[0] = worst_case_array[array_size - 2]
        worst_case_array[array_size - 2] = temp
        #array looks like [1,998, 997, ... , 3, 2, 999, 0]. Pivot will be [1,500, 0], setting 1 as pivot
        return worst_case_array